
FixedpointIIR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000978  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00802000  00000978  00000a0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00802028  00802028  00000a34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005697  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034e5  00000000  00000000  000061e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000868  00000000  00000000  000096c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00009f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000048f6  00000000  00000000  0000a0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000448  00000000  00000000  0000e9de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000ee26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 99 01 	jmp	0x332	; 0x332 <__vector_71>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e8 e7       	ldi	r30, 0x78	; 120
 214:	f9 e0       	ldi	r31, 0x09	; 9
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a8 32       	cpi	r26, 0x28	; 40
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	20 e2       	ldi	r18, 0x20	; 32
 228:	a8 e2       	ldi	r26, 0x28	; 40
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a6 34       	cpi	r26, 0x46	; 70
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 34 03 	call	0x668	; 0x668 <main>
 23a:	0c 94 ba 04 	jmp	0x974	; 0x974 <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <CCPWrite>:
 242:	0f 93       	push	r16
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	1f 92       	push	r1
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	2f b7       	in	r18, 0x3f	; 63
 250:	29 83       	std	Y+1, r18	; 0x01
 252:	f8 94       	cli
 254:	1b be       	out	0x3b, r1	; 59
 256:	fc 01       	movw	r30, r24
 258:	08 ed       	ldi	r16, 0xD8	; 216
 25a:	04 bf       	out	0x34, r16	; 52
 25c:	60 83       	st	Z, r22
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	8f bf       	out	0x3f, r24	; 63
 262:	0f 90       	pop	r0
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	0f 91       	pop	r16
 26a:	08 95       	ret

0000026c <CLKSYS_XOSC_Config>:
 26c:	61 11       	cpse	r22, r1
 26e:	02 c0       	rjmp	.+4      	; 0x274 <CLKSYS_XOSC_Config+0x8>
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	01 c0       	rjmp	.+2      	; 0x276 <CLKSYS_XOSC_Config+0xa>
 274:	90 e2       	ldi	r25, 0x20	; 32
 276:	84 2b       	or	r24, r20
 278:	89 2b       	or	r24, r25
 27a:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
 27e:	08 95       	ret

00000280 <CLKSYS_PLL_Config>:
 280:	6f 71       	andi	r22, 0x1F	; 31
 282:	86 2b       	or	r24, r22
 284:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
 288:	08 95       	ret

0000028a <CLKSYS_Disable>:
 28a:	e0 e5       	ldi	r30, 0x50	; 80
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	90 81       	ld	r25, Z
 290:	28 2f       	mov	r18, r24
 292:	20 95       	com	r18
 294:	92 23       	and	r25, r18
 296:	90 83       	st	Z, r25
 298:	90 81       	ld	r25, Z
 29a:	89 23       	and	r24, r25
 29c:	08 95       	ret

0000029e <CLKSYS_Main_ClockSource_Select>:
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	cf 93       	push	r28
 2a4:	c8 2f       	mov	r28, r24
 2a6:	00 e4       	ldi	r16, 0x40	; 64
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	f8 01       	movw	r30, r16
 2ac:	60 81       	ld	r22, Z
 2ae:	68 7f       	andi	r22, 0xF8	; 248
 2b0:	68 2b       	or	r22, r24
 2b2:	80 e4       	ldi	r24, 0x40	; 64
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 21 01 	call	0x242	; 0x242 <CCPWrite>
 2ba:	f8 01       	movw	r30, r16
 2bc:	80 81       	ld	r24, Z
 2be:	8c 23       	and	r24, r28
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	08 95       	ret

000002c8 <init_timer>:
//float b22 = 0.005808126894364891;

volatile int16_t res;

void init_timer(void){
	TCC0.PER = 2400;    // 48MHz/2400 = 20KHz
 2c8:	e0 e0       	ldi	r30, 0x00	; 0
 2ca:	f8 e0       	ldi	r31, 0x08	; 8
 2cc:	80 e6       	ldi	r24, 0x60	; 96
 2ce:	99 e0       	ldi	r25, 0x09	; 9
 2d0:	86 a3       	std	Z+38, r24	; 0x26
 2d2:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.INTCTRLA = TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_OFF_gc; /* All timer interrupts off */
 2d4:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCAINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCDINTLVL_OFF_gc; /* Disable Compare/Capture interrupts */
 2d6:	17 82       	std	Z+7, r1	; 0x07
	TCC0.CNT = 0;
 2d8:	10 a2       	std	Z+32, r1	; 0x20
 2da:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc; /* Start the timer with a clock divider of 1 */
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 83       	st	Z, r24
	
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc; // Connect TCC0 overflow to event channel 0, allowing us to trigger on this interupt  http://asf.atmel.com/docs/latest/xmegaa/html/adc_use_case_2.html
 2e0:	80 ec       	ldi	r24, 0xC0	; 192
 2e2:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
 2e6:	08 95       	ret

000002e8 <init_dac>:
  //TCE0.INTCTRLA = TC_OVFINTLVL_OFF_gc;        // Interrupt overflow off
}

void init_dac(void)
{
	DACB.CTRLC = DAC_REFSEL_AVCC_gc;					// Select reference
 2e8:	e0 e2       	ldi	r30, 0x20	; 32
 2ea:	f3 e0       	ldi	r31, 0x03	; 3
 2ec:	88 e0       	ldi	r24, 0x08	; 8
 2ee:	82 83       	std	Z+2, r24	; 0x02
	DACB.CTRLB = DAC_CHSEL_SINGLE_gc;					// Enable single channel.
 2f0:	11 82       	std	Z+1, r1	; 0x01
	DACB.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;			// Enable dac and CH0
 2f2:	85 e0       	ldi	r24, 0x05	; 5
 2f4:	80 83       	st	Z, r24
 2f6:	08 95       	ret

000002f8 <init_adc>:
}


void init_adc(void)
{
	PORTA.DIRCLR     = PIN2_bm|PIN3_bm;
 2f8:	8c e0       	ldi	r24, 0x0C	; 12
 2fa:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc |										// PA2 (PIN A2) to + channel 0
 2fe:	e0 e0       	ldi	r30, 0x00	; 0
 300:	f2 e0       	ldi	r31, 0x02	; 2
 302:	85 e1       	ldi	r24, 0x15	; 21
 304:	81 a3       	std	Z+33, r24	; 0x21
	ADC_CH_MUXNEG_GND_MODE3_gc;														// GND to - channel 0
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc;					/* Diff in, not using the gainblock */
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.REFCTRL     = ADC_REFSEL_INTVCC_gc;
 30a:	80 e1       	ldi	r24, 0x10	; 16
 30c:	82 83       	std	Z+2, r24	; 0x02
	ADCA.CTRLB = ADC_CURRLIMIT_NO_gc | ADC_RESOLUTION_12BIT_gc ;
 30e:	11 82       	std	Z+1, r1	; 0x01
	ADCA.CTRLB = ADC_CONMODE_bm;	/* Enable signed mode, 12-bit conversion */
 310:	81 83       	std	Z+1, r24	; 0x01
	ADCA.EVCTRL = ADC_SWEEP_0_gc | ADC_EVSEL_0123_gc | ADC_EVACT_SYNCSWEEP_gc;		/* Sweep channel 0, trigger using event channel 0, sync sweep on event */
 312:	86 e0       	ldi	r24, 0x06	; 6
 314:	83 83       	std	Z+3, r24	; 0x03

	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;										// 48MHz/32 = 1.5M
 316:	83 e0       	ldi	r24, 0x03	; 3
 318:	84 83       	std	Z+4, r24	; 0x04
	ADCA.CTRLA       = ADC_ENABLE_bm;
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	90 83       	st	Z, r25
	PMIC.CTRL |= PMIC_LOLVLEN_bm;													// low level interupt for adc conversion
 31e:	a0 ea       	ldi	r26, 0xA0	; 160
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	12 96       	adiw	r26, 0x02	; 2
 324:	8c 91       	ld	r24, X
 326:	12 97       	sbiw	r26, 0x02	; 2
 328:	81 60       	ori	r24, 0x01	; 1
 32a:	12 96       	adiw	r26, 0x02	; 2
 32c:	8c 93       	st	X, r24
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;			/* Trigger a low-level interrupt on completion of the CH0 conversion */
 32e:	92 a3       	std	Z+34, r25	; 0x22
 330:	08 95       	ret

00000332 <__vector_71>:
	
	} 


ISR(ADCA_CH0_vect)                                            // ADC Interupt for 20k samples, triggers on each sample on adc conversion complete.
{
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	0b b6       	in	r0, 0x3b	; 59
 33e:	0f 92       	push	r0
 340:	8f 92       	push	r8
 342:	9f 92       	push	r9
 344:	af 92       	push	r10
 346:	bf 92       	push	r11
 348:	cf 92       	push	r12
 34a:	df 92       	push	r13
 34c:	ef 92       	push	r14
 34e:	ff 92       	push	r15
 350:	2f 93       	push	r18
 352:	3f 93       	push	r19
 354:	4f 93       	push	r20
 356:	5f 93       	push	r21
 358:	6f 93       	push	r22
 35a:	7f 93       	push	r23
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
 360:	af 93       	push	r26
 362:	bf 93       	push	r27
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	ef 93       	push	r30
 36a:	ff 93       	push	r31
		
	 DACB.CH0DATA = BinaryValue;												//write filterdata to DAC (PIN A10)
 36c:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <__data_end>
 370:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <__data_end+0x1>
 374:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <__TEXT_REGION_LENGTH__+0x700338>
 378:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <__TEXT_REGION_LENGTH__+0x700339>
//	 DACB.CH1DATA = (~BinaryValue) & 0xFFF;										//inverse filter value to allow differential measurement

	 res = ADCA.CH0.RES;
 37c:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
 380:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
 384:	80 93 42 20 	sts	0x2042, r24	; 0x802042 <res>
 388:	90 93 43 20 	sts	0x2043, r25	; 0x802043 <res+0x1>


	 voltage = ((double)res * 1000 * VREF) / (MAX_VALUE_ADC + 1);
 38c:	60 91 42 20 	lds	r22, 0x2042	; 0x802042 <res>
 390:	70 91 43 20 	lds	r23, 0x2043	; 0x802043 <res+0x1>
 394:	07 2e       	mov	r0, r23
 396:	00 0c       	add	r0, r0
 398:	88 0b       	sbc	r24, r24
 39a:	99 0b       	sbc	r25, r25
 39c:	0e 94 8f 03 	call	0x71e	; 0x71e <__floatsisf>
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	4a e7       	ldi	r20, 0x7A	; 122
 3a6:	54 e4       	ldi	r21, 0x44	; 68
 3a8:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__mulsf3>
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	44 e0       	ldi	r20, 0x04	; 4
 3b2:	50 e4       	ldi	r21, 0x40	; 64
 3b4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__mulsf3>
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	5a e3       	ldi	r21, 0x3A	; 58
 3c0:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__mulsf3>
 3c4:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fixunssfsi>
 3c8:	60 93 36 20 	sts	0x2036, r22	; 0x802036 <voltage>
 3cc:	70 93 37 20 	sts	0x2037, r23	; 0x802037 <voltage+0x1>
	 //  printf("%u\n",iVoltage);

	 y2 = y2 + ((b10 * voltage) + (b11 * state_x1) + (b12*state_x2) - (a11*state_y1) - (a12*state_y2));
 3d0:	a0 91 36 20 	lds	r26, 0x2036	; 0x802036 <voltage>
 3d4:	b0 91 37 20 	lds	r27, 0x2037	; 0x802037 <voltage+0x1>
 3d8:	c0 91 3a 20 	lds	r28, 0x203A	; 0x80203a <state_x1>
 3dc:	d0 91 3b 20 	lds	r29, 0x203B	; 0x80203b <state_x1+0x1>
 3e0:	e0 91 40 20 	lds	r30, 0x2040	; 0x802040 <state_y1>
 3e4:	f0 91 41 20 	lds	r31, 0x2041	; 0x802041 <state_y1+0x1>
	    //if (y2 < -0x20000000)
	    //{
		    //y2 = -0x20000000;    /* clip value */
	    //}

	 y2 = y2 >> 14;
 3e8:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <b10>
 3ec:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <b10+0x1>
 3f0:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <b10+0x2>
 3f4:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <b10+0x3>
 3f8:	0e 94 98 04 	call	0x930	; 0x930 <__muluhisi3>
 3fc:	6b 01       	movw	r12, r22
 3fe:	7c 01       	movw	r14, r24
 400:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <b11>
 404:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <b11+0x1>
 408:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <b11+0x2>
 40c:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <b11+0x3>
 410:	de 01       	movw	r26, r28
 412:	0e 94 a3 04 	call	0x946	; 0x946 <__mulshisi3>
 416:	c6 0e       	add	r12, r22
 418:	d7 1e       	adc	r13, r23
 41a:	e8 1e       	adc	r14, r24
 41c:	f9 1e       	adc	r15, r25
 41e:	a0 91 2a 20 	lds	r26, 0x202A	; 0x80202a <state_x2>
 422:	b0 91 2b 20 	lds	r27, 0x202B	; 0x80202b <state_x2+0x1>
 426:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <b12>
 42a:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <b12+0x1>
 42e:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <b12+0x2>
 432:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <b12+0x3>
 436:	0e 94 a3 04 	call	0x946	; 0x946 <__mulshisi3>
 43a:	c6 0e       	add	r12, r22
 43c:	d7 1e       	adc	r13, r23
 43e:	e8 1e       	adc	r14, r24
 440:	f9 1e       	adc	r15, r25
 442:	20 91 24 20 	lds	r18, 0x2024	; 0x802024 <a11>
 446:	30 91 25 20 	lds	r19, 0x2025	; 0x802025 <a11+0x1>
 44a:	40 91 26 20 	lds	r20, 0x2026	; 0x802026 <a11+0x2>
 44e:	50 91 27 20 	lds	r21, 0x2027	; 0x802027 <a11+0x3>
 452:	df 01       	movw	r26, r30
 454:	0e 94 a3 04 	call	0x946	; 0x946 <__mulshisi3>
 458:	c6 1a       	sub	r12, r22
 45a:	d7 0a       	sbc	r13, r23
 45c:	e8 0a       	sbc	r14, r24
 45e:	f9 0a       	sbc	r15, r25
 460:	a0 91 38 20 	lds	r26, 0x2038	; 0x802038 <state_y2>
 464:	b0 91 39 20 	lds	r27, 0x2039	; 0x802039 <state_y2+0x1>
 468:	20 91 20 20 	lds	r18, 0x2020	; 0x802020 <a12>
 46c:	30 91 21 20 	lds	r19, 0x2021	; 0x802021 <a12+0x1>
 470:	40 91 22 20 	lds	r20, 0x2022	; 0x802022 <a12+0x2>
 474:	50 91 23 20 	lds	r21, 0x2023	; 0x802023 <a12+0x3>
 478:	0e 94 a3 04 	call	0x946	; 0x946 <__mulshisi3>
 47c:	c6 1a       	sub	r12, r22
 47e:	d7 0a       	sbc	r13, r23
 480:	e8 0a       	sbc	r14, r24
 482:	f9 0a       	sbc	r15, r25
 484:	80 91 32 20 	lds	r24, 0x2032	; 0x802032 <y2>
 488:	90 91 33 20 	lds	r25, 0x2033	; 0x802033 <y2+0x1>
 48c:	a0 91 34 20 	lds	r26, 0x2034	; 0x802034 <y2+0x2>
 490:	b0 91 35 20 	lds	r27, 0x2035	; 0x802035 <y2+0x3>
 494:	8c 0d       	add	r24, r12
 496:	9d 1d       	adc	r25, r13
 498:	ae 1d       	adc	r26, r14
 49a:	bf 1d       	adc	r27, r15
 49c:	4c 01       	movw	r8, r24
 49e:	5d 01       	movw	r10, r26
 4a0:	07 2e       	mov	r0, r23
 4a2:	7e e0       	ldi	r23, 0x0E	; 14
 4a4:	b5 94       	asr	r11
 4a6:	a7 94       	ror	r10
 4a8:	97 94       	ror	r9
 4aa:	87 94       	ror	r8
 4ac:	7a 95       	dec	r23
 4ae:	d1 f7       	brne	.-12     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4b0:	70 2d       	mov	r23, r0
	 state_x2 = state_x1;             /* bump the states over */
 4b2:	c0 93 2a 20 	sts	0x202A, r28	; 0x80202a <state_x2>
 4b6:	d0 93 2b 20 	sts	0x202B, r29	; 0x80202b <state_x2+0x1>
	 state_x1 = voltage;
 4ba:	80 91 36 20 	lds	r24, 0x2036	; 0x802036 <voltage>
 4be:	90 91 37 20 	lds	r25, 0x2037	; 0x802037 <voltage+0x1>
 4c2:	80 93 3a 20 	sts	0x203A, r24	; 0x80203a <state_x1>
 4c6:	90 93 3b 20 	sts	0x203B, r25	; 0x80203b <state_x1+0x1>
	 state_y2 = state_y1;
 4ca:	e0 93 38 20 	sts	0x2038, r30	; 0x802038 <state_y2>
 4ce:	f0 93 39 20 	sts	0x2039, r31	; 0x802039 <state_y2+0x1>
	 state_y1 = y2;
 4d2:	80 92 40 20 	sts	0x2040, r8	; 0x802040 <state_y1>
 4d6:	90 92 41 20 	sts	0x2041, r9	; 0x802041 <state_y1+0x1>

	 //2nd 2nd order
	 y = y + (b20*y2) + (b21*state_x2_1) + (b22*state_x2_2) - (a21*state_y2_1) - (a22*state_y2_2);
 4da:	c0 91 2e 20 	lds	r28, 0x202E	; 0x80202e <state_x2_1>
 4de:	d0 91 2f 20 	lds	r29, 0x202F	; 0x80202f <state_x2_1+0x1>
 4e2:	e0 91 44 20 	lds	r30, 0x2044	; 0x802044 <state_y2_1>
 4e6:	f0 91 45 20 	lds	r31, 0x2045	; 0x802045 <state_y2_1+0x1>
 4ea:	60 91 08 20 	lds	r22, 0x2008	; 0x802008 <b20>
 4ee:	70 91 09 20 	lds	r23, 0x2009	; 0x802009 <b20+0x1>
 4f2:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <b20+0x2>
 4f6:	90 91 0b 20 	lds	r25, 0x200B	; 0x80200b <b20+0x3>
 4fa:	a5 01       	movw	r20, r10
 4fc:	94 01       	movw	r18, r8
 4fe:	0e 94 88 04 	call	0x910	; 0x910 <__mulsi3>
 502:	c0 90 3c 20 	lds	r12, 0x203C	; 0x80203c <y>
 506:	d0 90 3d 20 	lds	r13, 0x203D	; 0x80203d <y+0x1>
 50a:	e0 90 3e 20 	lds	r14, 0x203E	; 0x80203e <y+0x2>
 50e:	f0 90 3f 20 	lds	r15, 0x203F	; 0x80203f <y+0x3>
 512:	c6 0e       	add	r12, r22
 514:	d7 1e       	adc	r13, r23
 516:	e8 1e       	adc	r14, r24
 518:	f9 1e       	adc	r15, r25
 51a:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <b21>
 51e:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <b21+0x1>
 522:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <b21+0x2>
 526:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <b21+0x3>
 52a:	de 01       	movw	r26, r28
 52c:	0e 94 a3 04 	call	0x946	; 0x946 <__mulshisi3>
 530:	c6 0e       	add	r12, r22
 532:	d7 1e       	adc	r13, r23
 534:	e8 1e       	adc	r14, r24
 536:	f9 1e       	adc	r15, r25
 538:	a0 91 30 20 	lds	r26, 0x2030	; 0x802030 <state_x2_2>
 53c:	b0 91 31 20 	lds	r27, 0x2031	; 0x802031 <state_x2_2+0x1>
 540:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
 544:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
 548:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <__data_start+0x2>
 54c:	50 91 03 20 	lds	r21, 0x2003	; 0x802003 <__data_start+0x3>
 550:	0e 94 a3 04 	call	0x946	; 0x946 <__mulshisi3>
 554:	c6 0e       	add	r12, r22
 556:	d7 1e       	adc	r13, r23
 558:	e8 1e       	adc	r14, r24
 55a:	f9 1e       	adc	r15, r25
 55c:	20 91 10 20 	lds	r18, 0x2010	; 0x802010 <a21>
 560:	30 91 11 20 	lds	r19, 0x2011	; 0x802011 <a21+0x1>
 564:	40 91 12 20 	lds	r20, 0x2012	; 0x802012 <a21+0x2>
 568:	50 91 13 20 	lds	r21, 0x2013	; 0x802013 <a21+0x3>
 56c:	df 01       	movw	r26, r30
 56e:	0e 94 a3 04 	call	0x946	; 0x946 <__mulshisi3>
 572:	c6 1a       	sub	r12, r22
 574:	d7 0a       	sbc	r13, r23
 576:	e8 0a       	sbc	r14, r24
 578:	f9 0a       	sbc	r15, r25
 57a:	a0 91 2c 20 	lds	r26, 0x202C	; 0x80202c <state_y2_2>
 57e:	b0 91 2d 20 	lds	r27, 0x202D	; 0x80202d <state_y2_2+0x1>
 582:	20 91 0c 20 	lds	r18, 0x200C	; 0x80200c <a22>
 586:	30 91 0d 20 	lds	r19, 0x200D	; 0x80200d <a22+0x1>
 58a:	40 91 0e 20 	lds	r20, 0x200E	; 0x80200e <a22+0x2>
 58e:	50 91 0f 20 	lds	r21, 0x200F	; 0x80200f <a22+0x3>
 592:	0e 94 a3 04 	call	0x946	; 0x946 <__mulshisi3>
 596:	c6 1a       	sub	r12, r22
 598:	d7 0a       	sbc	r13, r23
 59a:	e8 0a       	sbc	r14, r24
 59c:	f9 0a       	sbc	r15, r25
		    //{
			    //y = -0x20000000;    /* clip value */
		    //}
			
			//x_in is output of previous part.
	 state_x2_2 = state_x2_1;         /* bump the states over */
 59e:	c0 93 30 20 	sts	0x2030, r28	; 0x802030 <state_x2_2>
 5a2:	d0 93 31 20 	sts	0x2031, r29	; 0x802031 <state_x2_2+0x1>
	 state_x2_1 = y2;
 5a6:	80 92 2e 20 	sts	0x202E, r8	; 0x80202e <state_x2_1>
 5aa:	90 92 2f 20 	sts	0x202F, r9	; 0x80202f <state_x2_1+0x1>
	 state_y2_2 = state_y2_1;
 5ae:	e0 93 2c 20 	sts	0x202C, r30	; 0x80202c <state_y2_2>
 5b2:	f0 93 2d 20 	sts	0x202D, r31	; 0x80202d <state_y2_2+0x1>
	 state_y2_1 = y >> 14;
 5b6:	c7 01       	movw	r24, r14
 5b8:	b6 01       	movw	r22, r12
 5ba:	05 2e       	mov	r0, r21
 5bc:	5e e0       	ldi	r21, 0x0E	; 14
 5be:	95 95       	asr	r25
 5c0:	87 95       	ror	r24
 5c2:	77 95       	ror	r23
 5c4:	67 95       	ror	r22
 5c6:	5a 95       	dec	r21
 5c8:	d1 f7       	brne	.-12     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 5ca:	50 2d       	mov	r21, r0
 5cc:	60 93 44 20 	sts	0x2044, r22	; 0x802044 <state_y2_1>
 5d0:	70 93 45 20 	sts	0x2045, r23	; 0x802045 <state_y2_1+0x1>

	
	 double dY = y >> 14;
	 BinaryValue =  dY*((MAX_VALUE_DAC)/(VCC))*0.001*CAL_DAC ;				// Bitvalue
 5d4:	0e 94 8f 03 	call	0x71e	; 0x71e <__floatsisf>
 5d8:	27 e1       	ldi	r18, 0x17	; 23
 5da:	3d e1       	ldi	r19, 0x1D	; 29
 5dc:	4b e9       	ldi	r20, 0x9B	; 155
 5de:	54 e4       	ldi	r21, 0x44	; 68
 5e0:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__mulsf3>
 5e4:	2f e6       	ldi	r18, 0x6F	; 111
 5e6:	32 e1       	ldi	r19, 0x12	; 18
 5e8:	43 e8       	ldi	r20, 0x83	; 131
 5ea:	5a e3       	ldi	r21, 0x3A	; 58
 5ec:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__mulsf3>
 5f0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fixunssfsi>
 5f4:	60 93 28 20 	sts	0x2028, r22	; 0x802028 <__data_end>
 5f8:	70 93 29 20 	sts	0x2029, r23	; 0x802029 <__data_end+0x1>


//"fraction saving", but could be called "first-order noise shaping with round-down quantizer": whatever bits you lose in rounding down, add those zero-extended bits into the accumulator in the following sample. 
//this way your rounding error at DC is zero. infinite S/N at DC, lowered S/N for low frequencies and slightly higher S/N for frequencies above Nyquist/2 . 
// Gives binaryvalues  up to 2550 instead of 2400 without this. Just adds the fractions that are lost when rounding down to the next sample.
	 y2 = y2 & 0x00003FFF;
 5fc:	d5 01       	movw	r26, r10
 5fe:	c4 01       	movw	r24, r8
 600:	9f 73       	andi	r25, 0x3F	; 63
 602:	aa 27       	eor	r26, r26
 604:	bb 27       	eor	r27, r27
 606:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <y2>
 60a:	90 93 33 20 	sts	0x2033, r25	; 0x802033 <y2+0x1>
 60e:	a0 93 34 20 	sts	0x2034, r26	; 0x802034 <y2+0x2>
 612:	b0 93 35 20 	sts	0x2035, r27	; 0x802035 <y2+0x3>
	 y = y & 0x00003FFF;
 616:	8f e3       	ldi	r24, 0x3F	; 63
 618:	d8 22       	and	r13, r24
 61a:	ee 24       	eor	r14, r14
 61c:	ff 24       	eor	r15, r15
 61e:	c0 92 3c 20 	sts	0x203C, r12	; 0x80203c <y>
 622:	d0 92 3d 20 	sts	0x203D, r13	; 0x80203d <y+0x1>
 626:	e0 92 3e 20 	sts	0x203E, r14	; 0x80203e <y+0x2>
 62a:	f0 92 3f 20 	sts	0x203F, r15	; 0x80203f <y+0x3>
	
	
 }
 62e:	ff 91       	pop	r31
 630:	ef 91       	pop	r30
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	bf 91       	pop	r27
 638:	af 91       	pop	r26
 63a:	9f 91       	pop	r25
 63c:	8f 91       	pop	r24
 63e:	7f 91       	pop	r23
 640:	6f 91       	pop	r22
 642:	5f 91       	pop	r21
 644:	4f 91       	pop	r20
 646:	3f 91       	pop	r19
 648:	2f 91       	pop	r18
 64a:	ff 90       	pop	r15
 64c:	ef 90       	pop	r14
 64e:	df 90       	pop	r13
 650:	cf 90       	pop	r12
 652:	bf 90       	pop	r11
 654:	af 90       	pop	r10
 656:	9f 90       	pop	r9
 658:	8f 90       	pop	r8
 65a:	0f 90       	pop	r0
 65c:	0b be       	out	0x3b, r0	; 59
 65e:	0f 90       	pop	r0
 660:	0f be       	out	0x3f, r0	; 63
 662:	0f 90       	pop	r0
 664:	1f 90       	pop	r1
 666:	18 95       	reti

00000668 <main>:
}

static void InitClocks(void){
	
	/*  https://github.com/Synapseware/xmega-intro/blob/master/avr1003-clock-system/code/clksys_example.c    */
	CLKSYS_XOSC_Config( OSC_FRQRANGE_12TO16_gc, 0, OSC_XOSCSEL_XTAL_16KCLK_gc );  // Set frequency ranger, Low power off, Slow startup
 668:	4b e0       	ldi	r20, 0x0B	; 11
 66a:	60 e0       	ldi	r22, 0x00	; 0
 66c:	80 ec       	ldi	r24, 0xC0	; 192
 66e:	0e 94 36 01 	call	0x26c	; 0x26c <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );												  // Enable Clock
 672:	e0 e5       	ldi	r30, 0x50	; 80
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	80 81       	ld	r24, Z
 678:	88 60       	ori	r24, 0x08	; 8
 67a:	80 83       	st	Z, r24
	
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );						  // When ready set PLL
 67c:	81 81       	ldd	r24, Z+1	; 0x01
 67e:	83 ff       	sbrs	r24, 3
 680:	fd cf       	rjmp	.-6      	; 0x67c <main+0x14>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 3);									  // set clocksource and multiplication factor,
 682:	63 e0       	ldi	r22, 0x03	; 3
 684:	80 ec       	ldi	r24, 0xC0	; 192
 686:	0e 94 40 01 	call	0x280	; 0x280 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );												  // enable the PLL
 68a:	e0 e5       	ldi	r30, 0x50	; 80
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	80 81       	ld	r24, Z
 690:	80 61       	ori	r24, 0x10	; 16
 692:	80 83       	st	Z, r24
	
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );						  // when ready select PLL clock and disable the others.
 694:	81 81       	ldd	r24, Z+1	; 0x01
 696:	84 ff       	sbrs	r24, 4
 698:	fd cf       	rjmp	.-6      	; 0x694 <main+0x2c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
 69a:	84 e0       	ldi	r24, 0x04	; 4
 69c:	0e 94 4f 01 	call	0x29e	; 0x29e <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	0e 94 45 01 	call	0x28a	; 0x28a <CLKSYS_Disable>
	CLKSYS_Disable( OSC_RC32MEN_bm );
 6a6:	82 e0       	ldi	r24, 0x02	; 2
 6a8:	0e 94 45 01 	call	0x28a	; 0x28a <CLKSYS_Disable>
int main(void)
{
	 
//	PORTD.DIRSET = PIN7_bm;
	InitClocks();
	init_timer();		// init timer
 6ac:	0e 94 64 01 	call	0x2c8	; 0x2c8 <init_timer>
	init_dac();				// init DAC
 6b0:	0e 94 74 01 	call	0x2e8	; 0x2e8 <init_dac>
	init_adc();				// init ADC
 6b4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <init_adc>
//	PORTCFG.CLKEVOUT = PORTCFG_CLKOUT_PD7_gc; // output CLK value on pin D7




	sei();					//Enable interrupts
 6b8:	78 94       	sei
 6ba:	ff cf       	rjmp	.-2      	; 0x6ba <main+0x52>

000006bc <__fixunssfsi>:
 6bc:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__fp_splitA>
 6c0:	88 f0       	brcs	.+34     	; 0x6e4 <__fixunssfsi+0x28>
 6c2:	9f 57       	subi	r25, 0x7F	; 127
 6c4:	98 f0       	brcs	.+38     	; 0x6ec <__fixunssfsi+0x30>
 6c6:	b9 2f       	mov	r27, r25
 6c8:	99 27       	eor	r25, r25
 6ca:	b7 51       	subi	r27, 0x17	; 23
 6cc:	b0 f0       	brcs	.+44     	; 0x6fa <__fixunssfsi+0x3e>
 6ce:	e1 f0       	breq	.+56     	; 0x708 <__fixunssfsi+0x4c>
 6d0:	66 0f       	add	r22, r22
 6d2:	77 1f       	adc	r23, r23
 6d4:	88 1f       	adc	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	1a f0       	brmi	.+6      	; 0x6e0 <__fixunssfsi+0x24>
 6da:	ba 95       	dec	r27
 6dc:	c9 f7       	brne	.-14     	; 0x6d0 <__fixunssfsi+0x14>
 6de:	14 c0       	rjmp	.+40     	; 0x708 <__fixunssfsi+0x4c>
 6e0:	b1 30       	cpi	r27, 0x01	; 1
 6e2:	91 f0       	breq	.+36     	; 0x708 <__fixunssfsi+0x4c>
 6e4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__fp_zero>
 6e8:	b1 e0       	ldi	r27, 0x01	; 1
 6ea:	08 95       	ret
 6ec:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__fp_zero>
 6f0:	67 2f       	mov	r22, r23
 6f2:	78 2f       	mov	r23, r24
 6f4:	88 27       	eor	r24, r24
 6f6:	b8 5f       	subi	r27, 0xF8	; 248
 6f8:	39 f0       	breq	.+14     	; 0x708 <__fixunssfsi+0x4c>
 6fa:	b9 3f       	cpi	r27, 0xF9	; 249
 6fc:	cc f3       	brlt	.-14     	; 0x6f0 <__fixunssfsi+0x34>
 6fe:	86 95       	lsr	r24
 700:	77 95       	ror	r23
 702:	67 95       	ror	r22
 704:	b3 95       	inc	r27
 706:	d9 f7       	brne	.-10     	; 0x6fe <__fixunssfsi+0x42>
 708:	3e f4       	brtc	.+14     	; 0x718 <__fixunssfsi+0x5c>
 70a:	90 95       	com	r25
 70c:	80 95       	com	r24
 70e:	70 95       	com	r23
 710:	61 95       	neg	r22
 712:	7f 4f       	sbci	r23, 0xFF	; 255
 714:	8f 4f       	sbci	r24, 0xFF	; 255
 716:	9f 4f       	sbci	r25, 0xFF	; 255
 718:	08 95       	ret

0000071a <__floatunsisf>:
 71a:	e8 94       	clt
 71c:	09 c0       	rjmp	.+18     	; 0x730 <__floatsisf+0x12>

0000071e <__floatsisf>:
 71e:	97 fb       	bst	r25, 7
 720:	3e f4       	brtc	.+14     	; 0x730 <__floatsisf+0x12>
 722:	90 95       	com	r25
 724:	80 95       	com	r24
 726:	70 95       	com	r23
 728:	61 95       	neg	r22
 72a:	7f 4f       	sbci	r23, 0xFF	; 255
 72c:	8f 4f       	sbci	r24, 0xFF	; 255
 72e:	9f 4f       	sbci	r25, 0xFF	; 255
 730:	99 23       	and	r25, r25
 732:	a9 f0       	breq	.+42     	; 0x75e <__floatsisf+0x40>
 734:	f9 2f       	mov	r31, r25
 736:	96 e9       	ldi	r25, 0x96	; 150
 738:	bb 27       	eor	r27, r27
 73a:	93 95       	inc	r25
 73c:	f6 95       	lsr	r31
 73e:	87 95       	ror	r24
 740:	77 95       	ror	r23
 742:	67 95       	ror	r22
 744:	b7 95       	ror	r27
 746:	f1 11       	cpse	r31, r1
 748:	f8 cf       	rjmp	.-16     	; 0x73a <__floatsisf+0x1c>
 74a:	fa f4       	brpl	.+62     	; 0x78a <__floatsisf+0x6c>
 74c:	bb 0f       	add	r27, r27
 74e:	11 f4       	brne	.+4      	; 0x754 <__floatsisf+0x36>
 750:	60 ff       	sbrs	r22, 0
 752:	1b c0       	rjmp	.+54     	; 0x78a <__floatsisf+0x6c>
 754:	6f 5f       	subi	r22, 0xFF	; 255
 756:	7f 4f       	sbci	r23, 0xFF	; 255
 758:	8f 4f       	sbci	r24, 0xFF	; 255
 75a:	9f 4f       	sbci	r25, 0xFF	; 255
 75c:	16 c0       	rjmp	.+44     	; 0x78a <__floatsisf+0x6c>
 75e:	88 23       	and	r24, r24
 760:	11 f0       	breq	.+4      	; 0x766 <__floatsisf+0x48>
 762:	96 e9       	ldi	r25, 0x96	; 150
 764:	11 c0       	rjmp	.+34     	; 0x788 <__floatsisf+0x6a>
 766:	77 23       	and	r23, r23
 768:	21 f0       	breq	.+8      	; 0x772 <__floatsisf+0x54>
 76a:	9e e8       	ldi	r25, 0x8E	; 142
 76c:	87 2f       	mov	r24, r23
 76e:	76 2f       	mov	r23, r22
 770:	05 c0       	rjmp	.+10     	; 0x77c <__floatsisf+0x5e>
 772:	66 23       	and	r22, r22
 774:	71 f0       	breq	.+28     	; 0x792 <__floatsisf+0x74>
 776:	96 e8       	ldi	r25, 0x86	; 134
 778:	86 2f       	mov	r24, r22
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	2a f0       	brmi	.+10     	; 0x78a <__floatsisf+0x6c>
 780:	9a 95       	dec	r25
 782:	66 0f       	add	r22, r22
 784:	77 1f       	adc	r23, r23
 786:	88 1f       	adc	r24, r24
 788:	da f7       	brpl	.-10     	; 0x780 <__floatsisf+0x62>
 78a:	88 0f       	add	r24, r24
 78c:	96 95       	lsr	r25
 78e:	87 95       	ror	r24
 790:	97 f9       	bld	r25, 7
 792:	08 95       	ret

00000794 <__fp_split3>:
 794:	57 fd       	sbrc	r21, 7
 796:	90 58       	subi	r25, 0x80	; 128
 798:	44 0f       	add	r20, r20
 79a:	55 1f       	adc	r21, r21
 79c:	59 f0       	breq	.+22     	; 0x7b4 <__fp_splitA+0x10>
 79e:	5f 3f       	cpi	r21, 0xFF	; 255
 7a0:	71 f0       	breq	.+28     	; 0x7be <__fp_splitA+0x1a>
 7a2:	47 95       	ror	r20

000007a4 <__fp_splitA>:
 7a4:	88 0f       	add	r24, r24
 7a6:	97 fb       	bst	r25, 7
 7a8:	99 1f       	adc	r25, r25
 7aa:	61 f0       	breq	.+24     	; 0x7c4 <__fp_splitA+0x20>
 7ac:	9f 3f       	cpi	r25, 0xFF	; 255
 7ae:	79 f0       	breq	.+30     	; 0x7ce <__fp_splitA+0x2a>
 7b0:	87 95       	ror	r24
 7b2:	08 95       	ret
 7b4:	12 16       	cp	r1, r18
 7b6:	13 06       	cpc	r1, r19
 7b8:	14 06       	cpc	r1, r20
 7ba:	55 1f       	adc	r21, r21
 7bc:	f2 cf       	rjmp	.-28     	; 0x7a2 <__fp_split3+0xe>
 7be:	46 95       	lsr	r20
 7c0:	f1 df       	rcall	.-30     	; 0x7a4 <__fp_splitA>
 7c2:	08 c0       	rjmp	.+16     	; 0x7d4 <__fp_splitA+0x30>
 7c4:	16 16       	cp	r1, r22
 7c6:	17 06       	cpc	r1, r23
 7c8:	18 06       	cpc	r1, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	f1 cf       	rjmp	.-30     	; 0x7b0 <__fp_splitA+0xc>
 7ce:	86 95       	lsr	r24
 7d0:	71 05       	cpc	r23, r1
 7d2:	61 05       	cpc	r22, r1
 7d4:	08 94       	sec
 7d6:	08 95       	ret

000007d8 <__fp_zero>:
 7d8:	e8 94       	clt

000007da <__fp_szero>:
 7da:	bb 27       	eor	r27, r27
 7dc:	66 27       	eor	r22, r22
 7de:	77 27       	eor	r23, r23
 7e0:	cb 01       	movw	r24, r22
 7e2:	97 f9       	bld	r25, 7
 7e4:	08 95       	ret

000007e6 <__mulsf3>:
 7e6:	0e 94 06 04 	call	0x80c	; 0x80c <__mulsf3x>
 7ea:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__fp_round>
 7ee:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__fp_pscA>
 7f2:	38 f0       	brcs	.+14     	; 0x802 <__mulsf3+0x1c>
 7f4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__fp_pscB>
 7f8:	20 f0       	brcs	.+8      	; 0x802 <__mulsf3+0x1c>
 7fa:	95 23       	and	r25, r21
 7fc:	11 f0       	breq	.+4      	; 0x802 <__mulsf3+0x1c>
 7fe:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__fp_inf>
 802:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__fp_nan>
 806:	11 24       	eor	r1, r1
 808:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__fp_szero>

0000080c <__mulsf3x>:
 80c:	0e 94 ca 03 	call	0x794	; 0x794 <__fp_split3>
 810:	70 f3       	brcs	.-36     	; 0x7ee <__mulsf3+0x8>

00000812 <__mulsf3_pse>:
 812:	95 9f       	mul	r25, r21
 814:	c1 f3       	breq	.-16     	; 0x806 <__mulsf3+0x20>
 816:	95 0f       	add	r25, r21
 818:	50 e0       	ldi	r21, 0x00	; 0
 81a:	55 1f       	adc	r21, r21
 81c:	62 9f       	mul	r22, r18
 81e:	f0 01       	movw	r30, r0
 820:	72 9f       	mul	r23, r18
 822:	bb 27       	eor	r27, r27
 824:	f0 0d       	add	r31, r0
 826:	b1 1d       	adc	r27, r1
 828:	63 9f       	mul	r22, r19
 82a:	aa 27       	eor	r26, r26
 82c:	f0 0d       	add	r31, r0
 82e:	b1 1d       	adc	r27, r1
 830:	aa 1f       	adc	r26, r26
 832:	64 9f       	mul	r22, r20
 834:	66 27       	eor	r22, r22
 836:	b0 0d       	add	r27, r0
 838:	a1 1d       	adc	r26, r1
 83a:	66 1f       	adc	r22, r22
 83c:	82 9f       	mul	r24, r18
 83e:	22 27       	eor	r18, r18
 840:	b0 0d       	add	r27, r0
 842:	a1 1d       	adc	r26, r1
 844:	62 1f       	adc	r22, r18
 846:	73 9f       	mul	r23, r19
 848:	b0 0d       	add	r27, r0
 84a:	a1 1d       	adc	r26, r1
 84c:	62 1f       	adc	r22, r18
 84e:	83 9f       	mul	r24, r19
 850:	a0 0d       	add	r26, r0
 852:	61 1d       	adc	r22, r1
 854:	22 1f       	adc	r18, r18
 856:	74 9f       	mul	r23, r20
 858:	33 27       	eor	r19, r19
 85a:	a0 0d       	add	r26, r0
 85c:	61 1d       	adc	r22, r1
 85e:	23 1f       	adc	r18, r19
 860:	84 9f       	mul	r24, r20
 862:	60 0d       	add	r22, r0
 864:	21 1d       	adc	r18, r1
 866:	82 2f       	mov	r24, r18
 868:	76 2f       	mov	r23, r22
 86a:	6a 2f       	mov	r22, r26
 86c:	11 24       	eor	r1, r1
 86e:	9f 57       	subi	r25, 0x7F	; 127
 870:	50 40       	sbci	r21, 0x00	; 0
 872:	9a f0       	brmi	.+38     	; 0x89a <__mulsf3_pse+0x88>
 874:	f1 f0       	breq	.+60     	; 0x8b2 <__mulsf3_pse+0xa0>
 876:	88 23       	and	r24, r24
 878:	4a f0       	brmi	.+18     	; 0x88c <__mulsf3_pse+0x7a>
 87a:	ee 0f       	add	r30, r30
 87c:	ff 1f       	adc	r31, r31
 87e:	bb 1f       	adc	r27, r27
 880:	66 1f       	adc	r22, r22
 882:	77 1f       	adc	r23, r23
 884:	88 1f       	adc	r24, r24
 886:	91 50       	subi	r25, 0x01	; 1
 888:	50 40       	sbci	r21, 0x00	; 0
 88a:	a9 f7       	brne	.-22     	; 0x876 <__mulsf3_pse+0x64>
 88c:	9e 3f       	cpi	r25, 0xFE	; 254
 88e:	51 05       	cpc	r21, r1
 890:	80 f0       	brcs	.+32     	; 0x8b2 <__mulsf3_pse+0xa0>
 892:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__fp_inf>
 896:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__fp_szero>
 89a:	5f 3f       	cpi	r21, 0xFF	; 255
 89c:	e4 f3       	brlt	.-8      	; 0x896 <__mulsf3_pse+0x84>
 89e:	98 3e       	cpi	r25, 0xE8	; 232
 8a0:	d4 f3       	brlt	.-12     	; 0x896 <__mulsf3_pse+0x84>
 8a2:	86 95       	lsr	r24
 8a4:	77 95       	ror	r23
 8a6:	67 95       	ror	r22
 8a8:	b7 95       	ror	r27
 8aa:	f7 95       	ror	r31
 8ac:	e7 95       	ror	r30
 8ae:	9f 5f       	subi	r25, 0xFF	; 255
 8b0:	c1 f7       	brne	.-16     	; 0x8a2 <__mulsf3_pse+0x90>
 8b2:	fe 2b       	or	r31, r30
 8b4:	88 0f       	add	r24, r24
 8b6:	91 1d       	adc	r25, r1
 8b8:	96 95       	lsr	r25
 8ba:	87 95       	ror	r24
 8bc:	97 f9       	bld	r25, 7
 8be:	08 95       	ret

000008c0 <__fp_inf>:
 8c0:	97 f9       	bld	r25, 7
 8c2:	9f 67       	ori	r25, 0x7F	; 127
 8c4:	80 e8       	ldi	r24, 0x80	; 128
 8c6:	70 e0       	ldi	r23, 0x00	; 0
 8c8:	60 e0       	ldi	r22, 0x00	; 0
 8ca:	08 95       	ret

000008cc <__fp_nan>:
 8cc:	9f ef       	ldi	r25, 0xFF	; 255
 8ce:	80 ec       	ldi	r24, 0xC0	; 192
 8d0:	08 95       	ret

000008d2 <__fp_pscA>:
 8d2:	00 24       	eor	r0, r0
 8d4:	0a 94       	dec	r0
 8d6:	16 16       	cp	r1, r22
 8d8:	17 06       	cpc	r1, r23
 8da:	18 06       	cpc	r1, r24
 8dc:	09 06       	cpc	r0, r25
 8de:	08 95       	ret

000008e0 <__fp_pscB>:
 8e0:	00 24       	eor	r0, r0
 8e2:	0a 94       	dec	r0
 8e4:	12 16       	cp	r1, r18
 8e6:	13 06       	cpc	r1, r19
 8e8:	14 06       	cpc	r1, r20
 8ea:	05 06       	cpc	r0, r21
 8ec:	08 95       	ret

000008ee <__fp_round>:
 8ee:	09 2e       	mov	r0, r25
 8f0:	03 94       	inc	r0
 8f2:	00 0c       	add	r0, r0
 8f4:	11 f4       	brne	.+4      	; 0x8fa <__fp_round+0xc>
 8f6:	88 23       	and	r24, r24
 8f8:	52 f0       	brmi	.+20     	; 0x90e <__fp_round+0x20>
 8fa:	bb 0f       	add	r27, r27
 8fc:	40 f4       	brcc	.+16     	; 0x90e <__fp_round+0x20>
 8fe:	bf 2b       	or	r27, r31
 900:	11 f4       	brne	.+4      	; 0x906 <__fp_round+0x18>
 902:	60 ff       	sbrs	r22, 0
 904:	04 c0       	rjmp	.+8      	; 0x90e <__fp_round+0x20>
 906:	6f 5f       	subi	r22, 0xFF	; 255
 908:	7f 4f       	sbci	r23, 0xFF	; 255
 90a:	8f 4f       	sbci	r24, 0xFF	; 255
 90c:	9f 4f       	sbci	r25, 0xFF	; 255
 90e:	08 95       	ret

00000910 <__mulsi3>:
 910:	db 01       	movw	r26, r22
 912:	8f 93       	push	r24
 914:	9f 93       	push	r25
 916:	0e 94 98 04 	call	0x930	; 0x930 <__muluhisi3>
 91a:	bf 91       	pop	r27
 91c:	af 91       	pop	r26
 91e:	a2 9f       	mul	r26, r18
 920:	80 0d       	add	r24, r0
 922:	91 1d       	adc	r25, r1
 924:	a3 9f       	mul	r26, r19
 926:	90 0d       	add	r25, r0
 928:	b2 9f       	mul	r27, r18
 92a:	90 0d       	add	r25, r0
 92c:	11 24       	eor	r1, r1
 92e:	08 95       	ret

00000930 <__muluhisi3>:
 930:	0e 94 ab 04 	call	0x956	; 0x956 <__umulhisi3>
 934:	a5 9f       	mul	r26, r21
 936:	90 0d       	add	r25, r0
 938:	b4 9f       	mul	r27, r20
 93a:	90 0d       	add	r25, r0
 93c:	a4 9f       	mul	r26, r20
 93e:	80 0d       	add	r24, r0
 940:	91 1d       	adc	r25, r1
 942:	11 24       	eor	r1, r1
 944:	08 95       	ret

00000946 <__mulshisi3>:
 946:	b7 ff       	sbrs	r27, 7
 948:	0c 94 98 04 	jmp	0x930	; 0x930 <__muluhisi3>

0000094c <__mulohisi3>:
 94c:	0e 94 98 04 	call	0x930	; 0x930 <__muluhisi3>
 950:	82 1b       	sub	r24, r18
 952:	93 0b       	sbc	r25, r19
 954:	08 95       	ret

00000956 <__umulhisi3>:
 956:	a2 9f       	mul	r26, r18
 958:	b0 01       	movw	r22, r0
 95a:	b3 9f       	mul	r27, r19
 95c:	c0 01       	movw	r24, r0
 95e:	a3 9f       	mul	r26, r19
 960:	70 0d       	add	r23, r0
 962:	81 1d       	adc	r24, r1
 964:	11 24       	eor	r1, r1
 966:	91 1d       	adc	r25, r1
 968:	b2 9f       	mul	r27, r18
 96a:	70 0d       	add	r23, r0
 96c:	81 1d       	adc	r24, r1
 96e:	11 24       	eor	r1, r1
 970:	91 1d       	adc	r25, r1
 972:	08 95       	ret

00000974 <_exit>:
 974:	f8 94       	cli

00000976 <__stop_program>:
 976:	ff cf       	rjmp	.-2      	; 0x976 <__stop_program>
